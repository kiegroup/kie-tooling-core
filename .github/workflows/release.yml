name: "Release"

on:
  workflow_dispatch:
    inputs:
      new-version:
        description: "New version"
        required: true
      latest-version:
        description: "Latest version"
        required: true

jobs:
  create_release:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.KOGITO_TOOLING_BOT_TOKEN }}

      - name: "Setup kogito-tooling-bot"
        uses: ./.github/actions/setup-kogito-tooling-bot

      - name: "Setup Node"
        uses: actions/setup-node@v1
        with:
          node-version: 16.2.0

      - name: "Setup environment"
        uses: ./.github/actions/setup-env
        with:
          os: ${{ matrix.os }}

      - name: "Prepare '${{ github.event.inputs.new-version }}-prerelease' branch"
        id: create-release-branch
        run: |
          git checkout -b ${{ github.event.inputs.new-version }}-prerelease
          yarn update-version-to ${{ github.event.inputs.new-version }}
          git commit -am "Update version to ${{ github.event.inputs.new-version }}"
          # generate changelogs
          # commit
          echo ::set-output name=ref::$(git rev-parse HEAD)

      - name: "Build"
        env:
          KOGITO_TOOLING_BUILD_lint: "true"
          KOGITO_TOOLING_BUILD_test: "true"
        run: |
          lerna run build:prod --stream --no-private

      - name: "Push '${{ github.event.inputs.new-version }}-prerelease' branch"
        run: |
          git push origin ${{ github.event.inputs.new-version }}-prerelease

      - name: "Publish packages to NPM registry"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          lerna exec 'npm publish --access public' --stream --no-private --no-bail

      - name: "Release notes"
        id: release-notes
        shell: bash
        run: |
          CURRENT_COMMIT_SHA=${{ steps.create-release-branch.outputs.ref }}
          MERGE_BASE_WITH_LATEST_VERSION=$(git merge-base $CURRENT_COMMIT_SHA ${{ github.event.inputs.latest-version }})
          COMMIT_LIST=$(git log --pretty=format:'- [`%h`](https://github.com/${{ github.repository }}/commit/%H) %s ' --abbrev-commit $MERGE_BASE_WITH_LATEST_VERSION..$CURRENT_COMMIT_SHA)
          RELEASE_DESCRIPTION_BODY=$(echo "#### On this release:\n\n$COMMIT_LIST")
          echo ::set-output name=body::$RELEASE_DESCRIPTION_BODY

      - name: "Create GitHub Release"
        id: create_release_draft
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.new-version }}
          release_name: ${{ github.event.inputs.new-version }} (alpha)
          commitish: ${{ steps.create-release-branch.outputs.ref }}
          body: ${{ steps.release_notes.outputs.body }}
          draft: false
          prerelease: true
